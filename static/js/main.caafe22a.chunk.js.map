{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","features/initialTodos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","newQuery","newStatus","filters","query","status","initialState","filterReducer","data","findTodos","todos","prompt","searchBy","trim","toLowerCase","filter","title","includes","todosReducer","filteredData","completed","initialTodosReducer","rootReducer","combineReducers","currentTodo","initialTodos","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","isLoading","isEmpty","length","useSelector","dispatch","useDispatch","className","map","id","classNames","onClick","currentTodoActions","TodoFilter","initialStore","useState","isSearched","setIsSearched","onSubmit","event","preventDefault","value","onChange","e","newFilter","target","filterActions","todosActions","handleFilterChange","placeholder","handleQueryChange","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","todoId","find","el","loading","setLoading","user","setUser","useEffect","userId","finally","href","email","name","App","filteredStore","setIsLoading","initialActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.caafe22a.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetFilters = {\n  type: 'filters/set',\n  filters: {\n    query: string,\n    status: string,\n  }\n};\n\ntype SetQuery = {\n  type: 'filters/set/query',\n  filters: {\n    query: string,\n  }\n};\n\nexport type SetFilter = {\n  type: 'filters/set/filter',\n  filters: {\n    status: string,\n  }\n};\n\nconst set = (newQuery: string, newStatus: string): SetFilters => ({\n  type: 'filters/set',\n  filters: {\n    query: newQuery,\n    status: newStatus,\n  },\n});\n\nconst setQuery = (newQuery: string): SetQuery => ({\n  type: 'filters/set/query',\n  filters: {\n    query: newQuery,\n  },\n});\n\nconst setFilter = (newStatus: string): SetFilter => ({\n  type: 'filters/set/filter',\n  filters: {\n    status: newStatus,\n  },\n});\n\ntype Actions = SetFilters | SetQuery | SetFilter;\n\nexport const actions = { set, setQuery, setFilter };\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case 'filters/set':\n      return {\n        ...state,\n        ...action.filters,\n      };\n\n    case 'filters/set/query':\n      return {\n        ...state,\n        query: action.filters.query,\n      };\n\n    case 'filters/set/filter':\n      return {\n        ...state,\n        status: action.filters.status,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todos/set';\n  payload: Todo[];\n};\n\nconst set = (data: Todo[]): SetTodos => ({\n  type: 'todos/set',\n  payload: data,\n});\n\ntype FilterTodos = {\n  type: 'todos/filter';\n  payload: {\n    data: Todo[],\n    query: string,\n    status: string,\n  }\n};\n\nconst getFiltered = (\n  data: Todo[],\n  query: string,\n  status: string,\n): FilterTodos => ({\n  type: 'todos/filter',\n  payload: { data, query, status },\n});\n\ntype Action = SetTodos | FilterTodos;\n\nexport const actions = {\n  set,\n  getFiltered,\n};\n\nfunction findTodos(todos: Todo[], prompt: string) {\n  const searchBy = prompt.trim().toLowerCase();\n\n  if (searchBy) {\n    return todos.filter((todo) => todo.title.toLowerCase().includes(searchBy));\n  }\n\n  return todos;\n}\n\nconst todosReducer = (state: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/set':\n      return action.payload;\n\n    case 'todos/filter': {\n      const { data, query, status } = action.payload;\n\n      let filteredData = [...data];\n\n      switch (status) {\n        case 'active':\n          filteredData = filteredData.filter(\n            todo => !todo.completed,\n          );\n          break;\n\n        case 'completed':\n          filteredData = filteredData.filter(\n            todo => todo.completed,\n          );\n          break;\n\n        default:\n          break;\n      }\n\n      return findTodos(filteredData, query);\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'initialTodos/set';\n  payload: Todo[];\n};\n\nconst set = (data: Todo[]): SetTodos => ({\n  type: 'initialTodos/set',\n  payload: data,\n});\n\ntype Action = SetTodos;\n\nexport const actions = { set };\n\nconst initialTodosReducer = (state: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'initialTodos/set':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default initialTodosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\nimport initialTodosReducer from '../features/initialTodos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n  initialTodos: initialTodosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { RootState } from '../../app/store';\n\ntype Props = {\n  isLoading: boolean;\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ isLoading, todos }) => {\n  const isEmpty = todos.length === 0;\n  const currentTodo = useSelector((state: RootState) => state.currentTodo);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {isEmpty && !isLoading && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!isEmpty && !isLoading && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {(todo.completed) && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames({\n                      'has-text-danger': !todo.completed,\n                      'has-text-success': todo.completed,\n                    })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames({\n                          'far fa-eye': currentTodo?.id === 0 || currentTodo?.id !== todo.id,\n                          'far fa-eye-slash': currentTodo?.id === todo.id,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { actions as filterActions } from '../../features/filter';\nimport { actions as todosActions } from '../../features/todos';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const initialStore = useSelector((state: RootState) => state.initialTodos);\n\n  const query = useSelector((state: RootState) => state.filter.query);\n  const [isSearched, setIsSearched] = useState(false);\n\n  const filter = useSelector((state: RootState) => state.filter.status);\n\n  const handleFilterChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const newFilter = e.target.value;\n\n    dispatch(filterActions.set(query, newFilter));\n    dispatch(todosActions.getFiltered(\n      initialStore, query, newFilter,\n    ));\n  };\n\n  const handleQueryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const prompt = e.target.value;\n\n    dispatch(filterActions.setQuery(prompt));\n    dispatch(todosActions.getFiltered(initialStore, prompt, filter));\n    setIsSearched(true);\n\n    if (prompt.length === 0) {\n      setIsSearched(false);\n    }\n  };\n\n  const handleQueryReset = () => {\n    const prompt = '';\n\n    dispatch(filterActions.setQuery(prompt));\n    dispatch(\n      todosActions.getFiltered(initialStore, prompt, filter),\n    );\n    setIsSearched(false);\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={(e) => handleFilterChange(e)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => handleQueryChange(e)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {isSearched && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQueryReset()}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[];\n  todoId: number;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todos,\n  todoId,\n}) => {\n  const todo = todos.find(el => el.id === todoId);\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    if (todo) {\n      getUser(todo.userId)\n        .then(setUser)\n        .finally(() => setLoading(false));\n    }\n  }, [todoId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading && (\n        <Loader />\n      )}\n\n      {!loading && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-danger': !todo?.completed,\n                  'has-text-success': todo?.completed,\n                })}\n              >\n                {(todo?.completed) ? 'Done' : 'Planned'}\n              </strong>\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { RootState } from './app/store';\nimport { getTodos } from './api';\nimport { actions as initialActions } from './features/initialTodos';\nimport { actions as todosActions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const initialStore = useSelector((state: RootState) => state.initialTodos);\n  const filteredStore = useSelector((state: RootState) => state.todos);\n  const currentTodo = useSelector((state: RootState) => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (initialStore.length === 0) {\n      getTodos()\n        .then((todos) => {\n          dispatch(initialActions.set(todos));\n          dispatch(todosActions.set(todos));\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    isLoading={isLoading}\n                    todos={filteredStore}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal\n          todos={filteredStore}\n          todoId={currentTodo.id}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}